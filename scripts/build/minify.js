#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const jsMinifier = require('terser');
const htmlMinifier = require('html-minifier-terser').minify;
const glob = require('glob');

const minifyJsOptions = {
  keep_classnames: true,
  keep_fnames: true,
  output: {
    comments: false,
  },
};

async function minifyJs(content) {
  return (await jsMinifier.minify(content, minifyJsOptions)).code || '';
}

async function minifyHtml(content) {
  return htmlMinifier(content, {
    collapseBooleanAttributes: true,
    collapseWhitespace: true,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: minifyJsOptions,
    minifyURLs: true,
    processScripts: ['text/html'],
    ignoreCustomComments: [],
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    trimCustomFragments: true,
    useShortDoctype: true,
  });
}

async function minifyJson(content) {
  let json = {};
  try {
    json = JSON.parse(content);
    if (json.$schema) {
      // $schema is only needed for autocompletion
      delete json.$schema;
    }
    return JSON.stringify(json);
  } catch {
    return content;
  }
}

async function minifyFile(filePath, type) {
  const content = await fs.readFile(filePath, 'utf8');

  let minified;
  switch (type) {
    case 'svg':
    case 'html':
      minified = minifyHtml(content);
      break;
    case 'js':
      minified = minifyJs(content);
      break;
    case 'json':
      minified = minifyJson(content);
      break;
    default:
      throw new Error('Unknown extension: ' + type);
  }
  const result = await minified;
  await fs.writeFile(filePath, result);
}

const distFiles = {
  html: ['index.html', '404.html'],
  js: ['ngsw-worker.js', 'worker-basic.min.js', 'safety-worker.js'],
  json: ['ngsw.json'],
};
const ROOT_DIR = `${path.resolve(__dirname, '../../')}/src/dist/browser`;

async function minifyFiles() {
  for (const type of Object.keys(distFiles)) {
    const paths = distFiles[type].map(pattern => glob.sync(pattern, { cwd: ROOT_DIR })).reduce((a, b) => [...a, ...b], []);
    for (const contentPath of paths) {
      await minifyFile(path.resolve(ROOT_DIR, contentPath), type);
    }
  }
}

minifyFiles();
