name: ng-alain-delon

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: env
    jobs:
      - job: Init
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '18.10.0'
          - task: Cache@2
            displayName: Cache Yarn packages
            inputs:
              key: '"yarn" | "$(Agent.OS)"'
              restoreKeys: |
                "yarn" | "$(Agent.OS)"
                "yarn"
              path: $(YARN_CACHE_FOLDER)

  - stage: build
    dependsOn: env
    jobs:
      - job: build
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.10.0'
            displayName: 'Install Node.js'
          - script: |
              node --version
              yarn --version
              yarn config list
              yarn --frozen-lockfile
            displayName: 'Install'
          - task: Bash@3
            env:
              ACCESS_TOKEN: $(ACCESS_TOKEN)
            inputs:
              targetType: 'filePath'
              filePath: 'scripts/ci/build-artifacts.sh'
            displayName: 'Build artifacts'
          - script: |
              node ./scripts/azure/github-comment.js "[Preview Preparing...](https://dev.azure.com/ng-alain/delon/_build/results?buildId=$(Build.BuildId))"
            displayName: 'Comment on github'
            env:
              ACCESS_REPO: $(ACCESS_REPO)
              ACCESS_TOKEN: $(ACCESS_TOKEN)
          - script: |
              yarn run site:build:ssr
            displayName: 'Build site'
          - script: |
              export DEPLOY_DOMAIN=https://preview-${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}-ng-alain-delon.surge.sh
              echo "Deploy to $DEPLOY_DOMAIN"
              cp ./src/dist/browser/index.html ./src/dist/browser/404.html
              npx surge --project ./src/dist/browser --domain $DEPLOY_DOMAIN
            displayName: 'Deploy Site'
            env:
              ACCESS_REPO: $(ACCESS_REPO)
              ACCESS_TOKEN: $(ACCESS_TOKEN)
              SURGE_LOGIN: $(SURGE_LOGIN)
              SURGE_TOKEN: $(SURGE_TOKEN)
          - script: |
              export DEPLOY_DOMAIN=https://preview-${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}-ng-alain-delon.surge.sh
              node ./scripts/azure/github-comment.js "[Preview is ready!]($DEPLOY_DOMAIN)"
            displayName: 'Update comment on github'
            env:
              ACCESS_REPO: $(ACCESS_REPO)
              ACCESS_TOKEN: $(ACCESS_TOKEN)
      - job: Build_Failed
        dependsOn: Build
        condition: failed()
        steps:
          - checkout: self
            displayName: 'Checkout'
            clean: true
            fetchDepth: 1
          - script: yarn --frozen-lockfile
            displayName: 'Install modules'
          - script: |
              node ./scripts/azure/github-comment.js "[Preview Failed](https://dev.azure.com/ng-alain/delon/_build/results?buildId=$(Build.BuildId))"
            displayName: 'Comment on github'
            env:
              ACCESS_REPO: $(ACCESS_REPO)
              ACCESS_TOKEN: $(ACCESS_TOKEN)

  - stage: test
    dependsOn: env
    jobs:
      - job: packages
        steps:
          - script: yarn --frozen-lockfile
            displayName: 'Install'
          - script: |
              yarn run test
              cat ./coverage/lcov.info | ./node_modules/.bin/codecov
            env:
              CODECOV_TOKEN: $(CODECOV_TOKEN)

          - task: PublishCodeCoverageResults@1
            displayName: 'publish code coverage results'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
              reportDirectory: $(System.DefaultWorkingDirectory)/coverage
              failIfCoverageEmpty: true

          - task: PublishTestResults@2
            displayName: 'publish test results'
            condition: succeededOrFailed()
            inputs:
              searchFolder: $(System.DefaultWorkingDirectory)/junit
              failTaskOnFailedTests: true
              testRunTitle: DELON
              testResultsFormat: JUnit
              testResultsFiles: '**/TESTS*.xml'
      - job: cli
        steps:
          - script: yarn --frozen-lockfile
            displayName: 'Install'
          - script: yarn run test:cli

  - stage: lint
    dependsOn: env
    jobs:
      - job: packages
        steps:
          - script: yarn --frozen-lockfile
            displayName: 'Install'
          - script: yarn run lint
