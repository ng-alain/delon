import{a as s}from"./chunk-OO7Z5XQN.js";import{a as p}from"./chunk-XVODZEZ6.js";import"./chunk-6WIBMPTM.js";import"./chunk-TBZVYH6Z.js";import"./chunk-SCARKHZL.js";import"./chunk-ZY3TDUWQ.js";import"./chunk-HF5TSODR.js";import{Lb as i,Va as c,Xa as l,da as n,jb as r}from"./chunk-OB24VCRC.js";var u=(()=>{let t=class t{constructor(){this.item={cols:1,urls:{"en-US":"packages/acl/docs/control.en-US.md","zh-CN":"packages/acl/docs/control.zh-CN.md"},content:{"en-US":{content:`<section class="markdown"><h2 id="Foreword"><a class="lake-link"><i data-anchor="Foreword"></i></a>Foreword</h2><p>Many times you need to control the permissions of a button. <code>@delon/acl</code> provides an <code>acl</code> directive that allows you to control the permissions of a button, table, list, etc.</p><h2 id="Principle"><a class="lake-link"><i data-anchor="Principle"></i></a>Principle</h2><p><code>[acl]</code> adds a <code>acl__hide</code> style to the target element by default, and hides the unauthorized element with <code>display: none</code>, which is a simple and efficient way.</p><p>The corresponding <code>*aclIf</code> is a structured directive similar to <code>ngIf</code> which does not render the element when it is not authorized. <strong>Note:</strong> In order to keep it simple, it does not support <code>acl-ability</code> permission point configuration.</p><h2 id="DEMO"><a class="lake-link"><i data-anchor="DEMO"></i></a>DEMO</h2><h3 id="Role"><a class="lake-link"><i data-anchor="Role"></i></a>Role</h3><p>Displayed when the button must have a user role.</p><pre class="hljs language-html"><code>&lt;button [acl]="'user'"&gt;&lt;/button&gt;
&lt;button *aclIf="'user'"&gt;&lt;/button&gt;</code></pre><p>Displayed when the button must have a user or manage role.</p><pre class="hljs language-html"><code>&lt;button [acl]="['user', 'manage']"&gt;&lt;/button&gt;
&lt;button *aclIf="['user', 'manage']"&gt;&lt;/button&gt;</code></pre><p>Displayed when the button must have a user and manage role.</p><pre class="hljs language-html"><code>&lt;button [acl]="{ role: ['user', 'manage'], mode: 'allOf' }"&gt;&lt;/button&gt;
&lt;button *aclIf="{ role: ['user', 'manage'], mode: 'allOf' }"&gt;&lt;/button&gt;</code></pre><p>Displayed when the input muse have a user role, displayed text when it's not authorized.</p><pre class="hljs language-html"><code>&lt;input nz-input *aclIf="'user'; else unauthorized"&gt;
&lt;ng-template #unauthorized&gt;{{user}}&lt;/ng-template&gt;</code></pre><p>Use <code>except</code> reverse control to displayed when it's not authorized.</p><pre class="hljs language-html"><code>&lt;ng-template [aclIf]="role" except&gt;
  &lt;input nz-input&gt;
&lt;/ng-template&gt;</code></pre><h3 id="Permission"><a class="lake-link"><i data-anchor="Permission"></i></a>Permission</h3><p>Displayed when the button must have a 10 value permisseion.</p><pre class="hljs language-html"><code>&lt;button [acl]="10"&gt;&lt;/button&gt;</code></pre><p>In order for the acl instruction to be a role or a permission, so the value of the parameter value is <code>string</code> which mean the role, <code>number</code> which mean the permission. Use the <code>acl-ability</code> parameter if the permission is a string.</p><pre class="hljs language-html"><code>&lt;button acl [acl-ability]="'USER-EDIT'"&gt;&lt;/button&gt;</code></pre><ul><li><p><code>oneOf</code> Must be valid against exactly one of the given permission (default).</p></li><li><p><code>allOf</code> Must be valid against all of the given permission</p></li></ul><p>Displayed when the button must have a <code>10</code> and <code>USER-EDIT</code> permission.</p><pre class="hljs language-html"><code>&lt;button [acl]="{ ability: [10, 'USER-EDIT'], mode: 'allOf' }"&gt;&lt;/button&gt;</code></pre><p><strong>String permission</strong></p><p>The check permission is via the <code>can</code> method, and through <a href="/docs/global-config" data-url="/docs/global-config">Global Configuration</a> <code>acl.preCan</code> method, which can be used to implement a string to distinguish roles or permissions.</p><pre class="hljs language-ts"><code>// global-config.module.ts
const alainConfig: AlainConfig = {
  acl: {
    preCan: (roleOrAbility) => {
      const str = roleOrAbility.toString();
      return str.startsWith('ability.') ? { ability: [ str ] } : null;
    }
  }
};</code></pre><p>Therefore, passing a string with the beginning of <code>ability.</code> will be considered a permission point, for example:</p><pre class="hljs language-html"><code>&lt;button acl="ability.user.edit"&gt;&lt;/button&gt;</code></pre></section>`,api:'<h2 id="API"><a class="lake-link"><i data-anchor="API"></i></a>API</h2><h3 id="*aclIf"><a class="lake-link"><i data-anchor="*aclIf"></i></a>*aclIf</h3><table><thead><tr><th>Property</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>[aclIf]</code></td><td><code>can</code> method parameter</td><td><code>ACLCanType</code></td><td>-</td></tr><tr><td><code>[aclIfThen]</code></td><td>Display template when authorized</td><td><code>TemplateRef&lt;void> | null</code></td><td>-</td></tr><tr><td><code>[aclIfElse]</code></td><td>Display template when not authorized</td><td><code>TemplateRef&lt;void> | null</code></td><td>-</td></tr><tr><td><code>[except]</code></td><td>Permissions denied to display</td><td><code>boolean</code></td><td><code>false</code></td></tr></tbody></table>',meta:{order:3,title:"Granular permissions",type:"Documents"},toc:[{id:"Foreword",title:"Foreword",h:2},{id:"Principle",title:"Principle",h:2},{id:"DEMO",title:"DEMO",h:2,children:[{id:"Role",title:"Role",h:3},{id:"Permission",title:"Permission",h:3}]},{id:"API",title:"API",h:2,children:[{id:"*aclIf",title:"*aclIf",h:3}]}]},"zh-CN":{content:`<section class="markdown"><h2 id="\u5199\u5728\u524D\u9762"><a class="lake-link"><i data-anchor="\u5199\u5728\u524D\u9762"></i></a>\u5199\u5728\u524D\u9762</h2><p>\u5F88\u591A\u65F6\u5019\u9700\u8981\u5BF9\u67D0\u4E2A\u6309\u94AE\u8FDB\u884C\u6743\u9650\u63A7\u5236\uFF0C<code>@delon/acl</code> \u63D0\u4F9B\u4E00\u4E2A <code>acl</code> \u6307\u4EE4\uFF0C\u53EF\u4EE5\u5229\u7528\u89D2\u8272\u6216\u6743\u9650\u70B9\u5BF9\u67D0\u4E2A\u6309\u94AE\u3001\u8868\u683C\u3001\u5217\u8868\u7B49\u5143\u7D20\u8FDB\u884C\u6743\u9650\u63A7\u5236\u3002</p><h2 id="\u539F\u7406"><a class="lake-link"><i data-anchor="\u539F\u7406"></i></a>\u539F\u7406</h2><p><code>[acl]</code> \u9ED8\u8BA4\u4F1A\u5728\u76EE\u6807\u5143\u7D20\u4E0A\u589E\u52A0\u4E00\u4E2A <code>acl__hide</code> \u6837\u5F0F\uFF0C\u5229\u7528 <code>display: none</code> \u6765\u9690\u85CF\u672A\u6388\u6743\u5143\u7D20\uFF0C\u5B83\u662F\u4E00\u4E2A\u7B80\u5355\u3001\u53C8\u9AD8\u6548\u7684\u65B9\u5F0F\u3002</p><p>\u4EE5\u6B64\u76F8\u5BF9\u5E94\u7684 <code>*aclIf</code> \u662F\u4E00\u4E2A\u7ED3\u6784\u578B\u6307\u4EE4\uFF0C\u5B83\u7C7B\u4F3C <code>ngIf</code> \u5728\u672A\u6388\u6743\u65F6\u4F1A\u4E0D\u6E32\u67D3\u8BE5\u5143\u7D20\u3002<strong>\u6CE8\uFF1A</strong> \u4E3A\u4E86\u4FDD\u6301\u7B80\u6D01\u5B83\u5E76\u4E0D\u652F\u6301 <code>acl-ability</code> \u6743\u9650\u70B9\u914D\u7F6E\u3002</p><h2 id="\u793A\u4F8B"><a class="lake-link"><i data-anchor="\u793A\u4F8B"></i></a>\u793A\u4F8B</h2><h3 id="\u89D2\u8272"><a class="lake-link"><i data-anchor="\u89D2\u8272"></i></a>\u89D2\u8272</h3><p>\u6309\u94AE\u5FC5\u987B\u62E5\u6709 user \u89D2\u8272\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;button [acl]="'user'"&gt;&lt;/button&gt;
&lt;button *aclIf="'user'"&gt;&lt;/button&gt;</code></pre><p>\u6309\u94AE\u5FC5\u987B\u62E5\u6709 user \u6216 manage \u89D2\u8272\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;button [acl]="['user', 'manage']"&gt;&lt;/button&gt;
&lt;button *aclIf="['user', 'manage']"&gt;&lt;/button&gt;</code></pre><p>\u6309\u94AE\u5FC5\u987B\u62E5\u6709 user \u548C manage \u89D2\u8272\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;button [acl]="{ role: ['user', 'manage'], mode: 'allOf' }"&gt;&lt;/button&gt;
&lt;button *aclIf="{ role: ['user', 'manage'], mode: 'allOf' }"&gt;&lt;/button&gt;</code></pre><p>\u5F53\u62E5\u6709 user \u89D2\u8272\u663E\u793A\u6587\u672C\u6846\uFF0C\u672A\u6388\u6743\u663E\u793A\u6587\u672C\u3002</p><pre class="hljs language-html"><code>&lt;input nz-input *aclIf="'user'; else unauthorized"&gt;
&lt;ng-template #unauthorized&gt;{{user}}&lt;/ng-template&gt;</code></pre><p>\u4F7F\u7528 <code>except</code> \u53CD\u5411\u63A7\u5236\uFF0C\u5F53\u672A\u62E5\u6709 user \u89D2\u8272\u65F6\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;ng-template [aclIf]="role" except&gt;
  &lt;input nz-input&gt;
&lt;/ng-template&gt;</code></pre><h3 id="\u6743\u9650\u70B9"><a class="lake-link"><i data-anchor="\u6743\u9650\u70B9"></i></a>\u6743\u9650\u70B9</h3><p>\u6309\u94AE\u5FC5\u987B\u62E5\u6709 10 \u6743\u9650\u70B9\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;button [acl]="10"&gt;&lt;/button&gt;</code></pre><p>acl \u6307\u4EE4\u4E3A\u4E86\u80FD\u6240\u4F20\u9012\u7684\u503C\u662F\u89D2\u8272\u8FD8\u662F\u6743\u9650\u70B9\uFF0C\u6240\u4EE5\u4EE5 <code>string</code> \u7C7B\u578B\u8868\u793A\u89D2\u8272\u3001<code>number</code> \u7C7B\u578B\u8868\u793A\u6743\u9650\u70B9\uFF0C\u82E5\u6743\u9650\u70B9\u4E3A\u5B57\u7B26\u4E32\uFF0C\u53EF\u4F7F\u7528\u4EE5\u4E0B\u5199\u6CD5\u3002</p><pre class="hljs language-html"><code>&lt;button acl [acl-ability]="'USER-EDIT'"&gt;&lt;/button&gt;</code></pre><p>\u4F7F\u7528 <code>mode: 'allOf'</code> \u8868\u793A\u5FC5\u987B\u540C\u65F6\u62E5\u6709\u3002</p><ul><li><p><code>oneOf</code> \u8868\u793A\u53EA\u987B\u6EE1\u8DB3\u89D2\u8272\u6216\u6743\u9650\u70B9\u6570\u7EC4\u4E2D\u7684\u4E00\u9879\u7B97\u6709\u6548\uFF08\u9ED8\u8BA4\uFF09</p></li><li><p><code>allOf</code> \u8868\u793A\u5FC5\u987B\u6EE1\u8DB3\u6240\u6709\u89D2\u8272\u6216\u6743\u9650\u70B9\u6570\u7EC4\u7B97\u6709\u6548</p></li></ul><p>\u6309\u94AE\u5FC5\u987B\u62E5\u6709 <code>10</code> \u548C <code>USER-EDIT</code> \u6743\u9650\u70B9\u65F6\u663E\u793A\u3002</p><pre class="hljs language-html"><code>&lt;button [acl]="{ ability: [10, 'USER-EDIT'], mode: 'allOf' }"&gt;&lt;/button&gt;</code></pre><p><strong>\u5B57\u7B26\u4E32\u578B\u6743\u9650\u70B9</strong></p><p>\u68C0\u67E5\u6743\u9650\u662F\u901A\u8FC7 <code>can</code> \u65B9\u6CD5\uFF0C\u901A\u8FC7<a href="/docs/global-config" data-url="/docs/global-config">\u5168\u5C40\u914D\u7F6E</a> <code>acl.preCan</code> \u65B9\u6CD5\uFF0C\u53EF\u4EE5\u5229\u7528\u8BE5\u65B9\u6CD5\u6765\u5B9E\u73B0\u4E00\u4E2A\u5B57\u7B26\u4E32\u533A\u5206\u89D2\u8272\u6216\u6743\u9650\u70B9\u3002</p><pre class="hljs language-ts"><code>// global-config.module.ts
const alainConfig: AlainConfig = {
  acl: {
    preCan: (roleOrAbility) => {
      const str = roleOrAbility.toString();
      return str.startsWith('ability.') ? { ability: [ str ] } : null;
    }
  }
};</code></pre><p>\u56E0\u6B64\uFF0C\u5F53\u4F20\u9012\u4E00\u4E2A\u5E26\u6709 <code>ability.</code> \u5F00\u5934\u7684\u5B57\u7B26\u4E32\u4F1A\u88AB\u8BA4\u4E3A\u8FD9\u662F\u4E00\u4E2A\u6743\u9650\u70B9\uFF0C\u4F8B\u5982\uFF1A</p><pre class="hljs language-html"><code>&lt;button acl="ability.user.edit"&gt;&lt;/button&gt;</code></pre></section>`,api:'<h2 id="API"><a class="lake-link"><i data-anchor="API"></i></a>API</h2><h3 id="*aclIf"><a class="lake-link"><i data-anchor="*aclIf"></i></a>*aclIf</h3><table><thead><tr><th>\u53C2\u6570</th><th>\u8BF4\u660E</th><th>\u7C7B\u578B</th><th>\u9ED8\u8BA4\u503C</th></tr></thead><tbody><tr><td><code>[aclIf]</code></td><td><code>can</code> \u65B9\u6CD5\u53C2\u6570\u4F53</td><td><code>ACLCanType</code></td><td>-</td></tr><tr><td><code>[aclIfThen]</code></td><td>\u5DF2\u6388\u6743\u65F6\u663E\u793A\u6A21\u677F</td><td><code>TemplateRef&lt;void> | null</code></td><td>-</td></tr><tr><td><code>[aclIfElse]</code></td><td>\u672A\u6388\u6743\u65F6\u663E\u793A\u6A21\u677F</td><td><code>TemplateRef&lt;void> | null</code></td><td>-</td></tr><tr><td><code>[except]</code></td><td>\u672A\u6388\u6743\u65F6\u663E\u793A</td><td><code>boolean</code></td><td><code>false</code></td></tr></tbody></table>',meta:{order:3,title:"\u7C92\u5EA6\u63A7\u5236",type:"Documents"},toc:[{id:"\u5199\u5728\u524D\u9762",title:"\u5199\u5728\u524D\u9762",h:2},{id:"\u539F\u7406",title:"\u539F\u7406",h:2},{id:"\u793A\u4F8B",title:"\u793A\u4F8B",h:2,children:[{id:"\u89D2\u8272",title:"\u89D2\u8272",h:3},{id:"\u6743\u9650\u70B9",title:"\u6743\u9650\u70B9",h:3}]},{id:"API",title:"API",h:2,children:[{id:"*aclIf",title:"*aclIf",h:3}]}]}},demo:!1},this.codes=[]}};t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n({type:t,selectors:[["app-acl-control"]],hostVars:2,hostBindings:function(e,o){e&2&&l("d-block","true")},standalone:!0,features:[i],decls:1,vars:2,consts:[[3,"codes","item"]],template:function(e,o){e&1&&r(0,"app-docs",0),e&2&&c("codes",o.codes)("item",o.item)},dependencies:[s],encapsulation:2});let a=t;return a})();var g=(()=>{let t=class t{constructor(){this.item={cols:1,urls:{"en-US":"packages/acl/docs/getting-started.en-US.md","zh-CN":"packages/acl/docs/getting-started.zh-CN.md"},content:{"en-US":{content:`<section class="markdown"><p>ACL (Access Control List) is a very simple role-based permission control method, you can use in any Angular projects, a online <a target="_blank" href="//ng-alain.github.io/ng-alain/#/logics/acl" data-url="//ng-alain.github.io/ng-alain/#/logics/acl">DEMO</a></p><h2 id="AboutACLService"><a class="lake-link"><i data-anchor="AboutACLService"></i></a>AboutACLService</h2><p>The <code>ACLService</code> service class contains a set of methods based on role permissions. For a better coding experience ng-alain has multiple components or modules that depend on it, such as <code>st</code>, <code>MenuService</code> etc.. So, when you encounter the <code>acl</code> attribute, it means the parameter value of the <a href="#ACLCanType" data-url="#ACLCanType">can</a> method.</p><h2 id="Usage"><a class="lake-link"><i data-anchor="Usage"></i></a>Usage</h2><p>Install <code>@delon/acl</code>:</p><pre class="hljs language-bash"><code>npm i -S @delon/acl</code></pre><p>If you use Standalone, there is no need to import the <code>DelonACLModule</code> module, otherwise:</p><pre class="hljs language-typescript"><code>import { DelonACLModule } from '@delon/acl';

@NgModule({
  imports: [
    DelonACLModule
  ]
})
export class AppModule { }</code></pre></section>`,api:`<h2 id="API"><a class="lake-link"><i data-anchor="API"></i></a>API</h2><h3 id="Parameters"><a class="lake-link"><i data-anchor="Parameters"></i></a>Parameters</h3><table><thead><tr><th>Property</th><th>Description</th><th>Type</th><th>Default</th><th>Global Config</th></tr></thead><tbody><tr><td><code>[guard_url]</code></td><td><code>string</code></td><td>Router URL when guard fail</td><td><code>/403</code></td><td>\u2705</td></tr><tr><td><code>[preCan]</code></td><td><code>(roleOrAbility: <a data-toc="ACLCanType">ACLCanType</a>) => <a data-toc="ACLType">ACLType</a></code></td><td><code>can</code> before execution callback</td><td>-</td><td>\u2705</td></tr></tbody></table><blockquote><p>You can override them via <a href="/docs/global-config" data-url="/docs/global-config">Global Configuration</a>.</p></blockquote><h3 id="ACLService"><a class="lake-link"><i data-anchor="ACLService"></i></a>ACLService</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>[change]</code></td><td>Listen for ACL change notifications</td></tr><tr><td><code>[data]</code></td><td>Get all ACL data</td></tr><tr><td><code>setFull(val: boolean)</code></td><td>Whether to super administrator</td></tr><tr><td><code>set(value: <a data-toc="ACLType">ACLType</a>)</code></td><td>Set current user role or permission (automatic override)</td></tr><tr><td><code>setRole(roles: string[])</code></td><td>Set current user role (automatic override)</td></tr><tr><td><code>setAbility(abilities: (number | string)[])</code></td><td>Set current user permission (automatic override)</td></tr><tr><td><code>add(value: <a data-toc="ACLType">ACLType</a>)</code></td><td>Add role or permission to the current user</td></tr><tr><td><code>attachRole(roles: string[])</code></td><td>Attach a role to the current user</td></tr><tr><td><code>attachAbility(abilities: (number | string)[])</code></td><td>Attach a permission to the current user</td></tr><tr><td><code>removeRole(roles: string[])</code></td><td>Remove the role for the current user</td></tr><tr><td><code>removeAbility(abilities: (number | string)[])</code></td><td>Remove the permission for the current user</td></tr><tr><td><code>can(roleOrAbility: <a data-toc="ACLCanType">ACLCanType</a>)</code></td><td>Whether the current user has a role</td></tr><tr><td><code>canAbility(ability: <a data-toc="ACLCanType">ACLCanType</a>)</code></td><td>Whether the current user has a permission</td></tr></tbody></table><h3 id="ACLCanType"><a class="lake-link"><i data-anchor="ACLCanType"></i></a>ACLCanType</h3><pre class="hljs language-ts"><code>type ACLCanType = number | number[] | string | string[] | ACLType</code></pre><h3 id="ACLType"><a class="lake-link"><i data-anchor="ACLType"></i></a>ACLType</h3><table><thead><tr><th>Name</th><th>Type</th><th>Summary</th><th>Default</th></tr></thead><tbody><tr><td><code>[role]</code></td><td><code>string[]</code></td><td>List of role</td><td>-</td></tr><tr><td><code>[ability]</code></td><td><code>number[], string[]</code></td><td>List of permission</td><td>-</td></tr><tr><td><code>[mode]</code></td><td><code>allOf, oneOf</code></td><td><code>allOf</code> Must be valid against all of the given permission.<br><code>oneOf</code> Must be valid against exactly one of the given permission.</td><td><code>oneOf</code></td></tr><tr><td><code>[except]</code></td><td><code>boolean</code></td><td>Whether it's except, when the result is <code>true</code>, it means unauthorized</td><td><code>false</code></td></tr></tbody></table>`,meta:{order:1,title:"Getting Started",type:"Documents"},toc:[{id:"AboutACLService",title:"About ACLService",h:2},{id:"Usage",title:"Usage",h:2},{id:"API",title:"API",h:2,children:[{id:"Parameters",title:"Parameters",h:3},{id:"ACLService",title:"ACLService",h:3},{id:"ACLCanType",title:"ACLCanType",h:3},{id:"ACLType",title:"ACLType",h:3}]}]},"zh-CN":{content:`<section class="markdown"><p>ACL \u5168\u79F0\u53EB\u8BBF\u95EE\u63A7\u5236\u5217\u8868\uFF08Access Control List\uFF09\uFF0C\u662F\u4E00\u79CD\u975E\u5E38\u7B80\u5355\u7684\u57FA\u4E8E\u89D2\u8272\u6743\u9650\u63A7\u5236\u65B9\u5F0F\u3002\u4E00\u4E2A\u5B8C\u5168\u72EC\u7ACB <code>@delon/acl</code> \u6A21\u5757\uFF08<a target="_blank" href="//ng-alain.github.io/ng-alain/#/logics/acl" data-url="//ng-alain.github.io/ng-alain/#/logics/acl">DEMO</a>\uFF09\u3002</p><h2 id="\u5982\u4F55\u8FD0\u884C"><a class="lake-link"><i data-anchor="\u5982\u4F55\u8FD0\u884C"></i></a>\u5982\u4F55\u8FD0\u884C</h2><p>\u5185\u90E8\u5B9E\u9645\u662F\u4E00\u4E2A <code>ACLService</code> \u5B83\u63D0\u4F9B\u4E00\u5957\u57FA\u4E8E\u89D2\u8272\u6743\u9650\u670D\u52A1\u7C7B\u3002\u4E3A\u4E86\u66F4\u597D\u7684\u7F16\u7801\u4F53\u9A8C ng-alain \u6709\u591A\u5904\u7EC4\u4EF6\u6216\u6A21\u5757\u4E5F\u4F9D\u8D56\u4E8E\u5B83\uFF0C\u4F8B\u5982\uFF1A<code>st</code>\u3001<code>MenuService</code> \u7B49\uFF0C\u5E76\u4E14\u8FD9\u4E9B\u4F1A\u4EE5 <code>acl</code> \u5C5E\u6027\u7684\u5F62\u5F0F\u8868\u73B0\u3002\u56E0\u6B64\uFF0C\u5F53\u9047\u5230 <code>acl</code> \u5C5E\u6027\u90FD\u8868\u793A <a href="#ACLCanType" data-url="#ACLCanType">can</a> \u65B9\u6CD5\u7684<strong>\u53C2\u6570\u503C</strong>\u3002</p><h2 id="\u5982\u4F55\u4F7F\u7528"><a class="lake-link"><i data-anchor="\u5982\u4F55\u4F7F\u7528"></i></a>\u5982\u4F55\u4F7F\u7528</h2><p>\u5B89\u88C5 <code>@delon/acl</code> \u4F9D\u8D56\u5305\uFF1A</p><pre class="hljs language-bash"><code>npm i -S @delon/acl</code></pre><p>\u82E5\u4F7F\u7528 Standalone \u65E0\u9700\u8981\u989D\u5916\u5BFC\u5165 <code>DelonACLModule</code> \u6A21\u5757\uFF0C\u5426\u5219\uFF1A</p><pre class="hljs language-typescript"><code>import { DelonACLModule } from '@delon/acl';

@NgModule({
  imports: [
    DelonACLModule
  ]
})
export class AppModule { }</code></pre></section>`,api:'<h2 id="API"><a class="lake-link"><i data-anchor="API"></i></a>API</h2><h3 id="\u53C2\u6570"><a class="lake-link"><i data-anchor="\u53C2\u6570"></i></a>\u53C2\u6570</h3><table><thead><tr><th>\u53C2\u6570</th><th>\u8BF4\u660E</th><th>\u7C7B\u578B</th><th>\u9ED8\u8BA4\u503C</th><th>\u5168\u5C40\u914D\u7F6E</th></tr></thead><tbody><tr><td><code>[guard_url]</code></td><td><code>string</code></td><td>\u8DEF\u7531\u5B88\u536B\u5931\u8D25\u540E\u8DF3\u8F6C</td><td><code>/403</code></td><td>\u2705</td></tr><tr><td><code>[preCan]</code></td><td><code>(roleOrAbility: <a data-toc="ACLCanType">ACLCanType</a>) => <a data-toc="ACLType">ACLType</a></code></td><td><code>can</code> \u6267\u884C\u524D\u56DE\u8C03</td><td>-</td><td>\u2705</td></tr></tbody></table><blockquote><p>\u53EF\u4EE5\u901A\u8FC7<a href="/docs/global-config" data-url="/docs/global-config">\u5168\u5C40\u914D\u7F6E</a>\u8986\u76D6\u5B83\u4EEC\u3002</p></blockquote><h3 id="ACLService"><a class="lake-link"><i data-anchor="ACLService"></i></a>ACLService</h3><table><thead><tr><th>\u65B9\u6CD5</th><th>\u8BF4\u660E</th></tr></thead><tbody><tr><td><code>[change]</code></td><td>\u76D1\u542CACL\u53D8\u66F4\u901A\u77E5</td></tr><tr><td><code>[data]</code></td><td>\u83B7\u53D6\u6240\u6709ACL\u6570\u636E</td></tr><tr><td><code>setFull(val: boolean)</code></td><td>\u6807\u8BC6\u5F53\u524D\u7528\u6237\u4E3A\u5168\u91CF\uFF0C\u5373\u4E0D\u53D7\u9650</td></tr><tr><td><code>set(value: <a data-toc="ACLType">ACLType</a>)</code></td><td>\u8BBE\u7F6E\u5F53\u524D\u7528\u6237\u89D2\u8272\u6216\u6743\u9650\u80FD\u529B\uFF08\u4F1A\u5148\u6E05\u9664\u6240\u6709\uFF09</td></tr><tr><td><code>setRole(roles: string[])</code></td><td>\u8BBE\u7F6E\u5F53\u524D\u7528\u6237\u89D2\u8272\uFF08\u4F1A\u5148\u6E05\u9664\u6240\u6709\uFF09</td></tr><tr><td><code>setAbility(abilities: (number | string)[])</code></td><td>\u8BBE\u7F6E\u5F53\u524D\u7528\u6237\u6743\u9650\u80FD\u529B\uFF08\u4F1A\u5148\u6E05\u9664\u6240\u6709\uFF09</td></tr><tr><td><code>add(value: <a data-toc="ACLType">ACLType</a>)</code></td><td>\u4E3A\u5F53\u524D\u7528\u6237\u589E\u52A0\u89D2\u8272\u6216\u6743\u9650\u80FD\u529B</td></tr><tr><td><code>attachRole(roles: string[])</code></td><td>\u4E3A\u5F53\u524D\u7528\u6237\u9644\u52A0\u89D2\u8272</td></tr><tr><td><code>attachAbility(abilities: (number | string)[])</code></td><td>\u4E3A\u5F53\u524D\u7528\u6237\u9644\u52A0\u6743\u9650</td></tr><tr><td><code>removeRole(roles: string[])</code></td><td>\u4E3A\u5F53\u524D\u7528\u6237\u79FB\u9664\u89D2\u8272</td></tr><tr><td><code>removeAbility(abilities: (number | string)[])</code></td><td>\u4E3A\u5F53\u524D\u7528\u6237\u79FB\u9664\u6743\u9650</td></tr><tr><td><code>can(roleOrAbility: <a data-toc="ACLCanType">ACLCanType</a>)</code></td><td>\u5F53\u524D\u7528\u6237\u662F\u5426\u6709\u5BF9\u5E94\u89D2\u8272</td></tr><tr><td><code>canAbility(ability: <a data-toc="ACLCanType">ACLCanType</a>)</code></td><td>\u5F53\u524D\u7528\u6237\u662F\u5426\u6709\u5BF9\u5E94\u6743\u9650\u70B9</td></tr></tbody></table><h3 id="ACLCanType"><a class="lake-link"><i data-anchor="ACLCanType"></i></a>ACLCanType</h3><pre class="hljs language-ts"><code>type ACLCanType = number | number[] | string | string[] | ACLType</code></pre><h3 id="ACLType"><a class="lake-link"><i data-anchor="ACLType"></i></a>ACLType</h3><table><thead><tr><th>\u5C5E\u6027</th><th>\u7C7B\u578B</th><th>\u8BF4\u660E</th><th>\u9ED8\u8BA4</th></tr></thead><tbody><tr><td><code>[role]</code></td><td><code>string[]</code></td><td>\u89D2\u8272</td><td>-</td></tr><tr><td><code>[ability]</code></td><td><code>number[], string[]</code></td><td>\u6743\u9650\u70B9</td><td>-</td></tr><tr><td><code>[mode]</code></td><td><code>allOf, oneOf</code></td><td><code>allOf</code> \u8868\u793A\u5FC5\u987B\u6EE1\u8DB3\u6240\u6709\u89D2\u8272\u6216\u6743\u9650\u70B9\u6570\u7EC4\u7B97\u6709\u6548<br><code>oneOf</code> \u8868\u793A\u53EA\u987B\u6EE1\u8DB3\u89D2\u8272\u6216\u6743\u9650\u70B9\u6570\u7EC4\u4E2D\u7684\u4E00\u9879\u7B97\u6709\u6548</td><td><code>oneOf</code></td></tr><tr><td><code>[except]</code></td><td><code>boolean</code></td><td>\u662F\u5426\u53D6\u53CD\uFF0C\u5373\u7ED3\u679C\u4E3A <code>true</code> \u65F6\u8868\u793A\u672A\u6388\u6743</td><td><code>false</code></td></tr></tbody></table>',meta:{order:1,title:"\u5F00\u59CB\u4F7F\u7528",type:"Documents"},toc:[{id:"\u5982\u4F55\u8FD0\u884C",title:"\u5982\u4F55\u8FD0\u884C",h:2},{id:"\u5982\u4F55\u4F7F\u7528",title:"\u5982\u4F55\u4F7F\u7528",h:2},{id:"API",title:"API",h:2,children:[{id:"\u53C2\u6570",title:"\u53C2\u6570",h:3},{id:"ACLService",title:"ACLService",h:3},{id:"ACLCanType",title:"ACLCanType",h:3},{id:"ACLType",title:"ACLType",h:3}]}]}},demo:!1},this.codes=[]}};t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n({type:t,selectors:[["app-acl-getting-started"]],hostVars:2,hostBindings:function(e,o){e&2&&l("d-block","true")},standalone:!0,features:[i],decls:1,vars:2,consts:[[3,"codes","item"]],template:function(e,o){e&1&&r(0,"app-docs",0),e&2&&c("codes",o.codes)("item",o.item)},dependencies:[s],encapsulation:2});let a=t;return a})();var m=(()=>{let t=class t{constructor(){this.item={cols:1,urls:{"en-US":"packages/acl/docs/guard.en-US.md","zh-CN":"packages/acl/docs/guard.zh-CN.md"},content:{"en-US":{content:`<section class="markdown"><h2 id="Foreword"><a class="lake-link"><i data-anchor="Foreword"></i></a>Foreword</h2><p>Routing guard prevent unauthorized users visit the page.</p><p><code>@delon/acl</code> implements the generic guard functions <code>aclCanMatch</code>, <code>aclCanActivate</code>, <code>aclCanActivateChild</code>, which allows for complex operations through simple configuration in route registration, and supports the <code>Observable</code> type.</p><p>Use the fixed attribute <code>guard</code> to specify the <code>ACLCanType</code> parameter value, for example:</p><pre class="hljs language-ts"><code>const routes: Routes = [
  {
    path: 'auth',
    canActivate: [ aclCanActivate ],
    data: { guard: 'user1' as ACLGuardType }
  },
  {
    path: 'auth',
    canActivate: [ aclCanActivate ],
    data: {
      guard: {
        role: [ 'user1' ],
        ability: [ 10, 'USER-EDIT' ],
        mode: 'allOf'
      } as ACLGuardType,
      guard_url: '/no-permisseion'
    }
  },
  {
    path: 'obs',
    canActivate: [ aclCanActivate ],
    data: {
      guard: ((_srv, _injector) => {
        return of('user');
      }) as ACLGuardFunctionType,
      guard_url: '/no-permisseion'
    }
  }
]</code></pre><blockquote><p>The value of <code>guard</code> must match the value of <a href="/acl/api#ACLCanType" data-url="/acl/api#ACLCanType">ACLCanType</a>.</p></blockquote><h2 id="DEMO"><a class="lake-link"><i data-anchor="DEMO"></i></a>DEMO</h2><pre class="hljs language-ts"><code>import { of } from 'rxjs';
import { aclCanActivate, aclCanActivateChild, aclCanMatch } from '@delon/acl';
const routes: Routes = [
  {
    path: 'guard',
    component: GuardComponent,
    children: [
      { path: 'auth', component: GuardAuthComponent, canActivate: [ aclCanActivate ], data: { guard: 'user1' } },
      { path: 'admin', component: GuardAdminComponent, canActivate: [ aclCanActivate ], data: { guard: 'admin' } }
    ],
    canActivateChild: [ aclCanActivateChild ],
    data: { guard: <ACLType>{ role: [ 'user1' ], ability: [ 10, 'USER-EDIT' ], mode: 'allOf' } }
  },
  { path: 'pro', loadChildren: './pro/pro.module#ProModule', canMatch: [ aclCanMatch ], data: { guard: 1 } },
  { path: 'pro', loadChildren: './pro/pro.module#ProModule', canMatch: [ aclCanMatch ], data: { guard: of(false).pipe(map(v => 'admin')) } }
];</code></pre></section>`,meta:{order:3,title:"Guard",type:"Documents"},toc:[{id:"Foreword",title:"Foreword",h:2},{id:"DEMO",title:"DEMO",h:2}]},"zh-CN":{content:`<section class="markdown"><h2 id="\u5199\u5728\u524D\u9762"><a class="lake-link"><i data-anchor="\u5199\u5728\u524D\u9762"></i></a>\u5199\u5728\u524D\u9762</h2><p>\u8DEF\u7531\u5B88\u536B\u53EF\u4EE5\u9632\u6B62\u672A\u6388\u6743\u7528\u6237\u8BBF\u95EE\u9875\u9762\u3002</p><p>\u8DEF\u7531\u5B88\u536B\u9700\u8981\u5355\u72EC\u5BF9\u6BCF\u4E00\u4E2A\u8DEF\u7531\u8FDB\u884C\u8BBE\u7F6E\uFF0C\u5F88\u591A\u65F6\u5019\u8FD9\u770B\u8D77\u6765\u5F88\u7E41\u7410\uFF0C<code>@delon/acl</code> \u5B9E\u73B0\u4E86\u901A\u7528\u5B88\u536B\u51FD\u6570 <code>aclCanMatch</code>, <code>aclCanActivate</code>, <code>aclCanActivateChild</code>\uFF0C\u53EF\u4EE5\u5728\u8DEF\u7531\u6CE8\u518C\u65F6\u900F\u8FC7\u7B80\u5355\u7684\u914D\u7F6E\u5B8C\u6210\u4E00\u4E9B\u590D\u6742\u7684\u64CD\u4F5C\uFF0C\u751A\u81F3\u652F\u6301 <code>Observable</code> \u7C7B\u578B\u3002</p><p>\u4F7F\u7528\u56FA\u5B9A\u5C5E\u6027 <code>guard</code> \u6765\u6307\u5B9A <code>ACLCanType</code> \u53C2\u6570\uFF0C\u4F8B\u5982\uFF1A</p><pre class="hljs language-ts"><code>const routes: Routes = [
  {
    path: 'auth',
    canActivate: [ aclCanActivate ],
    data: { guard: 'user1' as ACLGuardType }
  },
  {
    path: 'auth',
    canActivate: [ aclCanActivate ],
    data: {
      guard: {
        role: [ 'user1' ],
        ability: [ 10, 'USER-EDIT' ],
        mode: 'allOf'
      } as ACLGuardType,
      guard_url: '/no-permisseion'
    }
  },
  {
    path: 'obs',
    canActivate: [ aclCanActivate ],
    data: {
      guard: ((_srv, _injector) => {
        return of('user');
      }) as ACLGuardFunctionType,
      guard_url: '/no-permisseion'
    }
  }
]</code></pre><blockquote><p><code>guard</code> \u7684\u503C\u5FC5\u987B\u7B26\u5408 <a href="/acl/getting-started#ACLCanType" data-url="/acl/getting-started#ACLCanType">ACLCanType</a> \u7C7B\u578B\u503C\u3002</p></blockquote><h2 id="\u793A\u4F8B"><a class="lake-link"><i data-anchor="\u793A\u4F8B"></i></a>\u793A\u4F8B</h2><pre class="hljs language-ts"><code>import { of } from 'rxjs';
import { aclCanActivate, aclCanActivateChild, aclCanMatch } from '@delon/acl';
const routes: Routes = [
  {
    path: 'guard',
    component: GuardComponent,
    children: [
      { path: 'auth', component: GuardAuthComponent, canActivate: [ aclCanActivate ], data: { guard: 'user1' } },
      { path: 'admin', component: GuardAdminComponent, canActivate: [ aclCanActivate ], data: { guard: 'admin' } }
    ],
    canActivateChild: [ aclCanActivateChild ],
    data: { guard: <ACLType>{ role: [ 'user1' ], ability: [ 10, 'USER-EDIT' ], mode: 'allOf' } }
  },
  { path: 'pro', loadChildren: './pro/pro.module#ProModule', canMatch: [ aclCanMatch ], data: { guard: 1 } },
  { path: 'pro', loadChildren: './pro/pro.module#ProModule', canMatch: [ aclCanMatch ], data: { guard: of(false).pipe(map(v => 'admin')) } }
];</code></pre></section>`,meta:{order:3,title:"\u8DEF\u7531\u5B88\u536B",type:"Documents"},toc:[{id:"\u5199\u5728\u524D\u9762",title:"\u5199\u5728\u524D\u9762",h:2},{id:"\u793A\u4F8B",title:"\u793A\u4F8B",h:2}]}},demo:!1},this.codes=[]}};t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n({type:t,selectors:[["app-acl-guard"]],hostVars:2,hostBindings:function(e,o){e&2&&l("d-block","true")},standalone:!0,features:[i],decls:1,vars:2,consts:[[3,"codes","item"]],template:function(e,o){e&1&&r(0,"app-docs",0),e&2&&c("codes",o.codes)("item",o.item)},dependencies:[s],encapsulation:2});let a=t;return a})();var O=[{path:"",component:p,children:[{path:"",redirectTo:"getting-started/zh",pathMatch:"full"},{path:"control",redirectTo:"control/zh",pathMatch:"full"},{path:"control/:lang",component:u},{path:"getting-started",redirectTo:"getting-started/zh",pathMatch:"full"},{path:"getting-started/:lang",component:g},{path:"guard",redirectTo:"guard/zh",pathMatch:"full"},{path:"guard/:lang",component:m}]}];export{O as routes};
